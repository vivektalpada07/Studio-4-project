name: Build, Test, and Deploy to UpCloud

on:
  push:
    branches:
      - main  # Trigger the action on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger the action on pull requests to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment for testing
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # Step 4: Run tests
      - name: Run tests
        run: npm test
        env:
          CI: true

      # Step 5: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 6: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 7: Build the Docker image
      - name: Build Docker image
        run: |
          npm cache clean --force
          docker build --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/my-react-app:latest .

      # Step 8: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 9: Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-react-app:latest

      # Step 10: Install sshpass for deployment
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # Step 11: Deploy Docker container on UpCloud
      - name: Deploy Docker container on UpCloud
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@95.111.219.120 << EOF
            set -e

            echo "Updating the server..."
            echo "$SSH_PASSWORD" | sudo -S apt update

            echo "Installing Docker if not present..."
            echo "$SSH_PASSWORD" | sudo -S apt install -y docker.io || true

            echo "Logging into Docker Hub..."
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            echo "Pulling the latest Docker image..."
            docker pull $DOCKER_USERNAME/my-react-app:latest

            echo "Stopping and removing existing container..."
            docker stop my-react-app || true
            docker rm my-react-app || true

            echo "Running the new container..."
            docker run -d --name my-react-app -p 5555:5555 $DOCKER_USERNAME/my-react-app:latest

            echo "Cleaning up unused Docker images..."
            docker image prune -af || true

            echo "Deployment complete!"
          EOF
